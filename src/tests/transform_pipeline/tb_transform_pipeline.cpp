#include <verilated.h>
#include <verilated_vcd_c.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include "../../../verilator_utils/fixed_point.h"

#include "obj_dir/Vtb_transform_pipeline.h"

#define INPUT_VERTEX_DATAWIDTH 24
#define INPUT_VERTEX_FRACBITS 13
#define OUTPUT_VERTEX_DATAWIDTH 12
#define OUTPUT_DEPTH_FRACBITS 11

#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 320
#define ZFAR 100.0f
#define ZNEAR 0.1f

const int cube_verticies_size = 12;
glm::vec3 cube_verticies[] = {
 glm::vec3(0.4375, 0.164063, 0.765625), glm::vec3(-0.4375, 0.164063, 0.765625), glm::vec3(0.5, 0.09375, 0.6875), glm::vec3(-0.5, 0.09375, 0.6875), glm::vec3(0.546875, 0.054688, 0.578125), glm::vec3(-0.546875, 0.054688, 0.578125), glm::vec3(0.351563, -0.023438, 0.617188), glm::vec3(-0.351563, -0.023438, 0.617188), glm::vec3(0.351563, 0.03125, 0.71875), glm::vec3(-0.351563, 0.03125, 0.71875), glm::vec3(0.351563, 0.132813, 0.78125), glm::vec3(-0.351563, 0.132813, 0.78125), glm::vec3(0.273438, 0.164063, 0.796875), glm::vec3(-0.273438, 0.164063, 0.796875), glm::vec3(0.203125, 0.09375, 0.742188), glm::vec3(-0.203125, 0.09375, 0.742188), 
 glm::vec3(0.15625, 0.054688, 0.648438), glm::vec3(-0.15625, 0.054688, 0.648438), glm::vec3(0.078125, 0.242188, 0.65625), glm::vec3(-0.078125, 0.242188, 0.65625), glm::vec3(0.140625, 0.242188, 0.742188), glm::vec3(-0.140625, 0.242188, 0.742188), glm::vec3(0.242188, 0.242188, 0.796875), glm::vec3(-0.242188, 0.242188, 0.796875), glm::vec3(0.273438, 0.328125, 0.796875), glm::vec3(-0.273438, 0.328125, 0.796875), glm::vec3(0.203125, 0.390625, 0.742188), glm::vec3(-0.203125, 0.390625, 0.742188), glm::vec3(0.15625, 0.4375, 0.648438), glm::vec3(-0.15625, 0.4375, 0.648438), glm::vec3(0.351563, 0.515625, 0.617188), glm::vec3(-0.351563, 0.515625, 0.617188), 
 glm::vec3(0.351563, 0.453125, 0.71875), glm::vec3(-0.351563, 0.453125, 0.71875), glm::vec3(0.351563, 0.359375, 0.78125), glm::vec3(-0.351563, 0.359375, 0.78125), glm::vec3(0.4375, 0.328125, 0.765625), glm::vec3(-0.4375, 0.328125, 0.765625), glm::vec3(0.5, 0.390625, 0.6875), glm::vec3(-0.5, 0.390625, 0.6875), glm::vec3(0.546875, 0.4375, 0.578125), glm::vec3(-0.546875, 0.4375, 0.578125), glm::vec3(0.625, 0.242188, 0.5625), glm::vec3(-0.625, 0.242188, 0.5625), glm::vec3(0.5625, 0.242188, 0.671875), glm::vec3(-0.5625, 0.242188, 0.671875), glm::vec3(0.46875, 0.242188, 0.757813), glm::vec3(-0.46875, 0.242188, 0.757813), 
 glm::vec3(0.476563, 0.242188, 0.773438), glm::vec3(-0.476563, 0.242188, 0.773438), glm::vec3(0.445313, 0.335938, 0.78125), glm::vec3(-0.445313, 0.335938, 0.78125), glm::vec3(0.351563, 0.375, 0.804688), glm::vec3(-0.351563, 0.375, 0.804688), glm::vec3(0.265625, 0.335938, 0.820313), glm::vec3(-0.265625, 0.335938, 0.820313), glm::vec3(0.226563, 0.242188, 0.820313), glm::vec3(-0.226563, 0.242188, 0.820313), glm::vec3(0.265625, 0.15625, 0.820313), glm::vec3(-0.265625, 0.15625, 0.820313), glm::vec3(0.351563, 0.242188, 0.828125), glm::vec3(-0.351563, 0.242188, 0.828125), glm::vec3(0.351563, 0.117188, 0.804688), glm::vec3(-0.351563, 0.117188, 0.804688), 
 glm::vec3(0.445313, 0.15625, 0.78125), glm::vec3(-0.445313, 0.15625, 0.78125), glm::vec3(0.0, 0.429688, 0.742188), glm::vec3(0.0, 0.351563, 0.820313), glm::vec3(0.0, -0.679688, 0.734375), glm::vec3(0.0, -0.320313, 0.78125), glm::vec3(0.0, -0.1875, 0.796875), glm::vec3(0.0, -0.773438, 0.71875), glm::vec3(0.0, 0.40625, 0.601563), glm::vec3(0.0, 0.570313, 0.570313), glm::vec3(0.0, 0.898438, -0.546875), glm::vec3(0.0, 0.5625, -0.851563), glm::vec3(0.0, 0.070313, -0.828125), glm::vec3(0.0, -0.382813, -0.351563), glm::vec3(0.203125, -0.1875, 0.5625), glm::vec3(-0.203125, -0.1875, 0.5625), glm::vec3(0.3125, -0.4375, 0.570313), 
 glm::vec3(-0.3125, -0.4375, 0.570313), glm::vec3(0.351563, -0.695313, 0.570313), glm::vec3(-0.351563, -0.695313, 0.570313), glm::vec3(0.367188, -0.890625, 0.53125), glm::vec3(-0.367188, -0.890625, 0.53125), glm::vec3(0.328125, -0.945313, 0.523438), glm::vec3(-0.328125, -0.945313, 0.523438), glm::vec3(0.179688, -0.96875, 0.554688), glm::vec3(-0.179688, -0.96875, 0.554688), glm::vec3(0.0, -0.984375, 0.578125), glm::vec3(0.4375, -0.140625, 0.53125), glm::vec3(-0.4375, -0.140625, 0.53125), glm::vec3(0.632813, -0.039063, 0.539063), glm::vec3(-0.632813, -0.039063, 0.539063), glm::vec3(0.828125, 0.148438, 0.445313), glm::vec3(-0.828125, 0.148438, 0.445313), glm::vec3(0.859375, 0.429688, 0.59375), glm::vec3(-0.859375, 0.429688, 0.59375), glm::vec3(0.710938, 0.484375, 0.625), glm::vec3(-0.710938, 0.484375, 0.625), glm::vec3(0.492188, 0.601563, 0.6875), glm::vec3(-0.492188, 0.601563, 0.6875), glm::vec3(0.320313, 0.757813, 0.734375), glm::vec3(-0.320313, 0.757813, 0.734375), glm::vec3(0.15625, 0.71875, 0.757813), glm::vec3(-0.15625, 0.71875, 0.757813), glm::vec3(0.0625, 0.492188, 0.75), glm::vec3(-0.0625, 0.492188, 0.75), glm::vec3(0.164063, 0.414063, 0.773438), glm::vec3(-0.164063, 0.414063, 0.773438), glm::vec3(0.125, 0.304688, 0.765625), glm::vec3(-0.125, 0.304688, 0.765625), glm::vec3(0.203125, 0.09375, 0.742188), glm::vec3(-0.203125, 0.09375, 0.742188), glm::vec3(0.375, 0.015625, 0.703125), glm::vec3(-0.375, 0.015625, 0.703125), glm::vec3(0.492188, 0.0625, 0.671875), glm::vec3(-0.492188, 0.0625, 0.671875), glm::vec3(0.625, 0.1875, 0.648438), glm::vec3(-0.625, 0.1875, 0.648438), glm::vec3(0.640625, 0.296875, 0.648438), glm::vec3(-0.640625, 0.296875, 0.648438), glm::vec3(0.601563, 0.375, 0.664063), glm::vec3(-0.601563, 0.375, 0.664063), glm::vec3(0.429688, 0.4375, 0.71875), glm::vec3(-0.429688, 0.4375, 0.71875), glm::vec3(0.25, 0.46875, 0.757813), glm::vec3(-0.25, 0.46875, 0.757813), glm::vec3(0.0, -0.765625, 0.734375), glm::vec3(0.109375, -0.71875, 0.734375), glm::vec3(-0.109375, -0.71875, 0.734375), glm::vec3(0.117188, -0.835938, 0.710938), glm::vec3(-0.117188, -0.835938, 0.710938), glm::vec3(0.0625, -0.882813, 0.695313), glm::vec3(-0.0625, -0.882813, 0.695313), glm::vec3(0.0, -0.890625, 0.6875), glm::vec3(0.0, -0.195313, 0.75), glm::vec3(0.0, -0.140625, 0.742188), glm::vec3(0.101563, -0.148438, 0.742188), glm::vec3(-0.101563, -0.148438, 0.742188), glm::vec3(0.125, -0.226563, 0.75), glm::vec3(-0.125, -0.226563, 0.75), glm::vec3(0.085938, -0.289063, 0.742188), glm::vec3(-0.085938, -0.289063, 0.742188), glm::vec3(0.398438, -0.046875, 0.671875), glm::vec3(-0.398438, -0.046875, 0.671875), glm::vec3(0.617188, 0.054688, 0.625), glm::vec3(-0.617188, 0.054688, 0.625), glm::vec3(0.726563, 0.203125, 0.601563), glm::vec3(-0.726563, 0.203125, 0.601563), glm::vec3(0.742188, 0.375, 0.65625), glm::vec3(-0.742188, 0.375, 0.65625), glm::vec3(0.6875, 0.414063, 0.726563), glm::vec3(-0.6875, 0.414063, 0.726563), glm::vec3(0.4375, 0.546875, 0.796875), glm::vec3(-0.4375, 0.546875, 0.796875), glm::vec3(0.3125, 0.640625, 0.835938), glm::vec3(-0.3125, 0.640625, 0.835938), glm::vec3(0.203125, 0.617188, 0.851563), glm::vec3(-0.203125, 0.617188, 0.851563), glm::vec3(0.101563, 0.429688, 0.84375), glm::vec3(-0.101563, 0.429688, 0.84375), glm::vec3(0.125, -0.101563, 0.8125), glm::vec3(-0.125, -0.101563, 0.8125), glm::vec3(0.210938, -0.445313, 0.710938), glm::vec3(-0.210938, -0.445313, 0.710938), glm::vec3(0.25, -0.703125, 0.6875), glm::vec3(-0.25, -0.703125, 0.6875), glm::vec3(0.265625, -0.820313, 0.664063), glm::vec3(-0.265625, -0.820313, 0.664063), glm::vec3(0.234375, -0.914063, 0.632813), glm::vec3(-0.234375, -0.914063, 0.632813), glm::vec3(0.164063, -0.929688, 0.632813), glm::vec3(-0.164063, -0.929688, 0.632813), glm::vec3(0.0, -0.945313, 0.640625), glm::vec3(0.0, 0.046875, 0.726563), glm::vec3(0.0, 0.210938, 0.765625), glm::vec3(0.328125, 0.476563, 0.742188), glm::vec3(-0.328125, 0.476563, 0.742188), glm::vec3(0.164063, 0.140625, 0.75), glm::vec3(-0.164063, 0.140625, 0.75), glm::vec3(0.132813, 0.210938, 0.757813), glm::vec3(-0.132813, 0.210938, 0.757813), glm::vec3(0.117188, -0.6875, 0.734375), glm::vec3(-0.117188, -0.6875, 0.734375), glm::vec3(0.078125, -0.445313, 0.75), glm::vec3(-0.078125, -0.445313, 0.75), glm::vec3(0.0, -0.445313, 0.75), glm::vec3(0.0, -0.328125, 0.742188), glm::vec3(0.09375, -0.273438, 0.78125), glm::vec3(-0.09375, -0.273438, 0.78125), glm::vec3(0.132813, -0.226563, 0.796875), glm::vec3(-0.132813, -0.226563, 0.796875), glm::vec3(0.109375, -0.132813, 0.78125), glm::vec3(-0.109375, -0.132813, 0.78125), glm::vec3(0.039063, -0.125, 0.78125), glm::vec3(-0.039063, -0.125, 0.78125), glm::vec3(0.0, -0.203125, 0.828125), glm::vec3(0.046875, -0.148438, 0.8125), glm::vec3(-0.046875, -0.148438, 0.8125), glm::vec3(0.09375, -0.15625, 0.8125), glm::vec3(-0.09375, -0.15625, 0.8125), glm::vec3(0.109375, -0.226563, 0.828125), glm::vec3(-0.109375, -0.226563, 0.828125), glm::vec3(0.078125, -0.25, 0.804688), glm::vec3(-0.078125, -0.25, 0.804688), glm::vec3(0.0, -0.289063, 0.804688), glm::vec3(0.257813, -0.3125, 0.554688), glm::vec3(-0.257813, -0.3125, 0.554688), glm::vec3(0.164063, -0.242188, 0.710938), glm::vec3(-0.164063, -0.242188, 0.710938), glm::vec3(0.179688, -0.3125, 0.710938), glm::vec3(-0.179688, -0.3125, 0.710938), glm::vec3(0.234375, -0.25, 0.554688), glm::vec3(-0.234375, -0.25, 0.554688), glm::vec3(0.0, -0.875, 0.6875), glm::vec3(0.046875, -0.867188, 0.6875), glm::vec3(-0.046875, -0.867188, 0.6875), glm::vec3(0.09375, -0.820313, 0.710938), glm::vec3(-0.09375, -0.820313, 0.710938), glm::vec3(0.09375, -0.742188, 0.726563), glm::vec3(-0.09375, -0.742188, 0.726563), glm::vec3(0.0, -0.78125, 0.65625), glm::vec3(0.09375, -0.75, 0.664063), glm::vec3(-0.09375, -0.75, 0.664063), glm::vec3(0.09375, -0.8125, 0.640625), glm::vec3(-0.09375, -0.8125, 0.640625), glm::vec3(0.046875, -0.851563, 0.632813), glm::vec3(-0.046875, -0.851563, 0.632813), glm::vec3(0.0, -0.859375, 0.632813), glm::vec3(0.171875, 0.21875, 0.78125), glm::vec3(-0.171875, 0.21875, 0.78125), glm::vec3(0.1875, 0.15625, 0.773438), glm::vec3(-0.1875, 0.15625, 0.773438), glm::vec3(0.335938, 0.429688, 0.757813), glm::vec3(-0.335938, 0.429688, 0.757813), glm::vec3(0.273438, 0.421875, 0.773438), glm::vec3(-0.273438, 0.421875, 0.773438), glm::vec3(0.421875, 0.398438, 0.773438), glm::vec3(-0.421875, 0.398438, 0.773438), glm::vec3(0.5625, 0.351563, 0.695313), glm::vec3(-0.5625, 0.351563, 0.695313), glm::vec3(0.585938, 0.289063, 0.6875), glm::vec3(-0.585938, 0.289063, 0.6875), glm::vec3(0.578125, 0.195313, 0.679688), glm::vec3(-0.578125, 0.195313, 0.679688), glm::vec3(0.476563, 0.101563, 0.71875), glm::vec3(-0.476563, 0.101563, 0.71875), glm::vec3(0.375, 0.0625, 0.742188), glm::vec3(-0.375, 0.0625, 0.742188), glm::vec3(0.226563, 0.109375, 0.78125), glm::vec3(-0.226563, 0.109375, 0.78125), glm::vec3(0.179688, 0.296875, 0.78125), glm::vec3(-0.179688, 0.296875, 0.78125), glm::vec3(0.210938, 0.375, 0.78125), glm::vec3(-0.210938, 0.375, 0.78125), glm::vec3(0.234375, 0.359375, 0.757813), glm::vec3(-0.234375, 0.359375, 0.757813), glm::vec3(0.195313, 0.296875, 0.757813), glm::vec3(-0.195313, 0.296875, 0.757813), glm::vec3(0.242188, 0.125, 0.757813), glm::vec3(-0.242188, 0.125, 0.757813), glm::vec3(0.375, 0.085938, 0.726563), glm::vec3(-0.375, 0.085938, 0.726563), glm::vec3(0.460938, 0.117188, 0.703125), glm::vec3(-0.460938, 0.117188, 0.703125), glm::vec3(0.546875, 0.210938, 0.671875), glm::vec3(-0.546875, 0.210938, 0.671875), glm::vec3(0.554688, 0.28125, 0.671875), glm::vec3(-0.554688, 0.28125, 0.671875), glm::vec3(0.53125, 0.335938, 0.679688), glm::vec3(-0.53125, 0.335938, 0.679688), glm::vec3(0.414063, 0.390625, 0.75), glm::vec3(-0.414063, 0.390625, 0.75), glm::vec3(0.28125, 0.398438, 0.765625), glm::vec3(-0.28125, 0.398438, 0.765625), glm::vec3(0.335938, 0.40625, 0.75), glm::vec3(-0.335938, 0.40625, 0.75), glm::vec3(0.203125, 0.171875, 0.75), glm::vec3(-0.203125, 0.171875, 0.75), glm::vec3(0.195313, 0.226563, 0.75), glm::vec3(-0.195313, 0.226563, 0.75), glm::vec3(0.109375, 0.460938, 0.609375), glm::vec3(-0.109375, 0.460938, 0.609375), glm::vec3(0.195313, 0.664063, 0.617188), glm::vec3(-0.195313, 0.664063, 0.617188), glm::vec3(0.335938, 0.6875, 0.59375), glm::vec3(-0.335938, 0.6875, 0.59375), glm::vec3(0.484375, 0.554688, 0.554688), glm::vec3(-0.484375, 0.554688, 0.554688), glm::vec3(0.679688, 0.453125, 0.492188), glm::vec3(-0.679688, 0.453125, 0.492188), glm::vec3(0.796875, 0.40625, 0.460938), glm::vec3(-0.796875, 0.40625, 0.460938), glm::vec3(0.773438, 0.164063, 0.375), glm::vec3(-0.773438, 0.164063, 0.375), glm::vec3(0.601563, 0.0, 0.414063), glm::vec3(-0.601563, 0.0, 0.414063), glm::vec3(0.4375, -0.09375, 0.46875), glm::vec3(-0.4375, -0.09375, 0.46875), glm::vec3(0.0, 0.898438, 0.289063), glm::vec3(0.0, 0.984375, -0.078125), glm::vec3(0.0, -0.195313, -0.671875), glm::vec3(0.0, -0.460938, 0.1875), glm::vec3(0.0, -0.976563, 0.460938), glm::vec3(0.0, -0.804688, 0.34375), glm::vec3(0.0, -0.570313, 0.320313), glm::vec3(0.0, -0.484375, 0.28125), glm::vec3(0.851563, 0.234375, 0.054688), glm::vec3(-0.851563, 0.234375, 0.054688), glm::vec3(0.859375, 0.320313, -0.046875), glm::vec3(-0.859375, 0.320313, -0.046875), glm::vec3(0.773438, 0.265625, -0.4375), glm::vec3(-0.773438, 0.265625, -0.4375), glm::vec3(0.460938, 0.4375, -0.703125), glm::vec3(-0.460938, 0.4375, -0.703125), glm::vec3(0.734375, -0.046875, 0.070313), glm::vec3(-0.734375, -0.046875, 0.070313), glm::vec3(0.59375, -0.125, -0.164063), glm::vec3(-0.59375, -0.125, -0.164063), glm::vec3(0.640625, -0.007813, -0.429688), glm::vec3(-0.640625, -0.007813, -0.429688), glm::vec3(0.335938, 0.054688, -0.664063), glm::vec3(-0.335938, 0.054688, -0.664063), glm::vec3(0.234375, -0.351563, 0.40625), glm::vec3(-0.234375, -0.351563, 0.40625), glm::vec3(0.179688, -0.414063, 0.257813), glm::vec3(-0.179688, -0.414063, 0.257813), glm::vec3(0.289063, -0.710938, 0.382813), glm::vec3(-0.289063, -0.710938, 0.382813), glm::vec3(0.25, -0.5, 0.390625), glm::vec3(-0.25, -0.5, 0.390625), glm::vec3(0.328125, -0.914063, 0.398438), glm::vec3(-0.328125, -0.914063, 0.398438), glm::vec3(0.140625, -0.757813, 0.367188), glm::vec3(-0.140625, -0.757813, 0.367188), glm::vec3(0.125, -0.539063, 0.359375), glm::vec3(-0.125, -0.539063, 0.359375), glm::vec3(0.164063, -0.945313, 0.4375), glm::vec3(-0.164063, -0.945313, 0.4375), glm::vec3(0.21875, -0.28125, 0.429688), glm::vec3(-0.21875, -0.28125, 0.429688), glm::vec3(0.210938, -0.226563, 0.46875), glm::vec3(-0.210938, -0.226563, 0.46875), glm::vec3(0.203125, -0.171875, 0.5), glm::vec3(-0.203125, -0.171875, 0.5), glm::vec3(0.210938, -0.390625, 0.164063), glm::vec3(-0.210938, -0.390625, 0.164063), glm::vec3(0.296875, -0.3125, -0.265625), glm::vec3(-0.296875, -0.3125, -0.265625), glm::vec3(0.34375, -0.148438, -0.539063), glm::vec3(-0.34375, -0.148438, -0.539063), glm::vec3(0.453125, 0.867188, -0.382813), glm::vec3(-0.453125, 0.867188, -0.382813), glm::vec3(0.453125, 0.929688, -0.070313), glm::vec3(-0.453125, 0.929688, -0.070313), glm::vec3(0.453125, 0.851563, 0.234375), glm::vec3(-0.453125, 0.851563, 0.234375), glm::vec3(0.460938, 0.523438, 0.429688), glm::vec3(-0.460938, 0.523438, 0.429688), glm::vec3(0.726563, 0.40625, 0.335938), glm::vec3(-0.726563, 0.40625, 0.335938), glm::vec3(0.632813, 0.453125, 0.28125), glm::vec3(-0.632813, 0.453125, 0.28125), glm::vec3(0.640625, 0.703125, 0.054688), glm::vec3(-0.640625, 0.703125, 0.054688), glm::vec3(0.796875, 0.5625, 0.125), glm::vec3(-0.796875, 0.5625, 0.125), glm::vec3(0.796875, 0.617188, -0.117188), glm::vec3(-0.796875, 0.617188, -0.117188), glm::vec3(0.640625, 0.75, -0.195313), glm::vec3(-0.640625, 0.75, -0.195313), glm::vec3(0.640625, 0.679688, -0.445313), glm::vec3(-0.640625, 0.679688, -0.445313), glm::vec3(0.796875, 0.539063, -0.359375), glm::vec3(-0.796875, 0.539063, -0.359375), glm::vec3(0.617188, 0.328125, -0.585938), glm::vec3(-0.617188, 0.328125, -0.585938), glm::vec3(0.484375, 0.023438, -0.546875), glm::vec3(-0.484375, 0.023438, -0.546875), glm::vec3(0.820313, 0.328125, -0.203125), glm::vec3(-0.820313, 0.328125, -0.203125), 
 glm::vec3(0.40625, -0.171875, 0.148438), glm::vec3(-0.40625, -0.171875, 0.148438), glm::vec3(0.429688, -0.195313, -0.210938), glm::vec3(-0.429688, -0.195313, -0.210938), glm::vec3(0.890625, 0.40625, -0.234375), glm::vec3(-0.890625, 0.40625, -0.234375), glm::vec3(0.773438, -0.140625, -0.125), glm::vec3(-0.773438, -0.140625, -0.125), glm::vec3(1.039063, -0.101563, -0.328125), glm::vec3(-1.039063, -0.101563, -0.328125), glm::vec3(1.28125, 0.054688, -0.429688), glm::vec3(-1.28125, 0.054688, -0.429688), glm::vec3(1.351563, 0.320313, -0.421875), glm::vec3(-1.351563, 0.320313, -0.421875), glm::vec3(1.234375, 0.507813, -0.421875), glm::vec3(-1.234375, 0.507813, -0.421875), glm::vec3(1.023438, 0.476563, -0.3125), glm::vec3(-1.023438, 0.476563, -0.3125), glm::vec3(1.015625, 0.414063, -0.289063), glm::vec3(-1.015625, 0.414063, -0.289063), glm::vec3(1.1875, 0.4375, -0.390625), glm::vec3(-1.1875, 0.4375, -0.390625), glm::vec3(1.265625, 0.289063, -0.40625), glm::vec3(-1.265625, 0.289063, -0.40625), glm::vec3(1.210938, 0.078125, -0.40625), glm::vec3(-1.210938, 0.078125, -0.40625), glm::vec3(1.03125, -0.039063, -0.304688), glm::vec3(-1.03125, -0.039063, -0.304688), glm::vec3(0.828125, -0.070313, -0.132813), glm::vec3(-0.828125, -0.070313, -0.132813), glm::vec3(0.921875, 0.359375, -0.21875), glm::vec3(-0.921875, 0.359375, -0.21875), glm::vec3(0.945313, 0.304688, -0.289063), glm::vec3(-0.945313, 0.304688, -0.289063), glm::vec3(0.882813, -0.023438, -0.210938), glm::vec3(-0.882813, -0.023438, -0.210938), glm::vec3(1.039063, 0.0, -0.367188), glm::vec3(-1.039063, 0.0, -0.367188), glm::vec3(1.1875, 0.09375, -0.445313), glm::vec3(-1.1875, 0.09375, -0.445313), glm::vec3(1.234375, 0.25, -0.445313), glm::vec3(-1.234375, 0.25, -0.445313), glm::vec3(1.171875, 0.359375, -0.4375), glm::vec3(-1.171875, 0.359375, -0.4375), glm::vec3(1.023438, 0.34375, -0.359375), glm::vec3(-1.023438, 0.34375, -0.359375), glm::vec3(0.84375, 0.289063, -0.210938), glm::vec3(-0.84375, 0.289063, -0.210938), glm::vec3(0.835938, 0.171875, -0.273438), glm::vec3(-0.835938, 0.171875, -0.273438), glm::vec3(0.757813, 0.09375, -0.273438), glm::vec3(-0.757813, 0.09375, -0.273438), glm::vec3(0.820313, 0.085938, -0.273438), glm::vec3(-0.820313, 0.085938, -0.273438), glm::vec3(0.84375, 0.015625, -0.273438), glm::vec3(-0.84375, 0.015625, -0.273438), glm::vec3(0.8125, -0.015625, -0.273438), glm::vec3(-0.8125, -0.015625, -0.273438), glm::vec3(0.726563, 0.0, -0.070313), glm::vec3(-0.726563, 0.0, -0.070313), glm::vec3(0.71875, -0.023438, -0.171875), glm::vec3(-0.71875, -0.023438, -0.171875), glm::vec3(0.71875, 0.039063, -0.1875), glm::vec3(-0.71875, 0.039063, -0.1875), glm::vec3(0.796875, 0.203125, -0.210938), glm::vec3(-0.796875, 0.203125, -0.210938), glm::vec3(0.890625, 0.242188, -0.265625), glm::vec3(-0.890625, 0.242188, -0.265625), glm::vec3(0.890625, 0.234375, -0.320313), glm::vec3(-0.890625, 0.234375, -0.320313), glm::vec3(0.8125, -0.015625, -0.320313), glm::vec3(-0.8125, -0.015625, -0.320313), glm::vec3(0.851563, 0.015625, -0.320313), glm::vec3(-0.851563, 0.015625, -0.320313), glm::vec3(0.828125, 0.078125, -0.320313), glm::vec3(-0.828125, 0.078125, -0.320313), glm::vec3(0.765625, 0.09375, -0.320313), glm::vec3(-0.765625, 0.09375, -0.320313), glm::vec3(0.84375, 0.171875, -0.320313), glm::vec3(-0.84375, 0.171875, -0.320313), glm::vec3(1.039063, 0.328125, -0.414063), glm::vec3(-1.039063, 0.328125, -0.414063), glm::vec3(1.1875, 0.34375, -0.484375), glm::vec3(-1.1875, 0.34375, -0.484375), glm::vec3(1.257813, 0.242188, -0.492188), glm::vec3(-1.257813, 0.242188, -0.492188), glm::vec3(1.210938, 0.085938, -0.484375), glm::vec3(-1.210938, 0.085938, -0.484375), glm::vec3(1.046875, 0.0, -0.421875), glm::vec3(-1.046875, 0.0, -0.421875), glm::vec3(0.882813, -0.015625, -0.265625), glm::vec3(-0.882813, -0.015625, -0.265625), glm::vec3(0.953125, 0.289063, -0.34375), glm::vec3(-0.953125, 0.289063, -0.34375), glm::vec3(0.890625, 0.109375, -0.328125), glm::vec3(-0.890625, 0.109375, -0.328125), glm::vec3(0.9375, 0.0625, -0.335938), glm::vec3(-0.9375, 0.0625, -0.335938), glm::vec3(1.0, 0.125, -0.367188), glm::vec3(-1.0, 0.125, -0.367188), glm::vec3(0.960938, 0.171875, -0.351563), glm::vec3(-0.960938, 0.171875, -0.351563), glm::vec3(1.015625, 0.234375, -0.375), glm::vec3(-1.015625, 0.234375, -0.375), glm::vec3(1.054688, 0.1875, -0.382813), glm::vec3(-1.054688, 0.1875, -0.382813), glm::vec3(1.109375, 0.210938, -0.390625), glm::vec3(-1.109375, 0.210938, -0.390625), glm::vec3(1.085938, 0.273438, -0.390625), glm::vec3(-1.085938, 0.273438, -0.390625), glm::vec3(1.023438, 0.4375, -0.484375), glm::vec3(-1.023438, 0.4375, -0.484375), glm::vec3(1.25, 0.46875, -0.546875), glm::vec3(-1.25, 0.46875, -0.546875), glm::vec3(1.367188, 0.296875, -0.5), glm::vec3(-1.367188, 0.296875, -0.5), glm::vec3(1.3125, 0.054688, -0.53125), glm::vec3(-1.3125, 0.054688, -0.53125), glm::vec3(1.039063, -0.085938, -0.492188), glm::vec3(-1.039063, -0.085938, -0.492188), glm::vec3(0.789063, -0.125, -0.328125), glm::vec3(-0.789063, -0.125, -0.328125), glm::vec3(0.859375, 0.382813, -0.382813), glm::vec3(-0.859375, 0.382813, -0.382813), glm::vec3(-1.023438, 0.476563, -0.3125), glm::vec3(-1.234375, 0.507813, -0.421875), glm::vec3(-0.890625, 0.40625, -0.234375), glm::vec3(-0.820313, 0.328125, -0.203125)
};

#define RESET_CLKS 8
#define MAX_SIM_TIME 1152921504606846976
vluint64_t sim_time = 0;
vluint64_t posedge_cnt = 0;

void print_matrix_glm(glm::mat4 m);
void print_matrix(float mat[4][4]);
void print_vector(float vec[4]);
void print_matrix_fixed_point(void* mat);

int32_t sign_extend(int32_t a, int data_width) {
    int32_t sign = (a >> (data_width - 1)) & 1;
    int32_t sign_extended = a;
    if (sign) {
        for (int i = sizeof(int32_t) * 8 - 1; i >= data_width; i--) {
            sign_extended |= (1 << i);
        }
    }
    return sign_extended; 
}

void assign_mvp_data(Vtb_transform_pipeline* dut, glm::mat4 mvp) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            int32_t fixed_point = FixedPoint<int32_t>::fromFloat(mvp[j][i], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).get();
            dut->i_mvp_matrix[i][j] = fixed_point;
        }
    }
};

void assign_vertex_data(Vtb_transform_pipeline* dut, glm::vec3 vertex) {
    for (int i = 0; i < 3; i++) {
        dut->i_vertex[i] = FixedPoint<int32_t>::fromFloat(vertex[i], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).get();
    }
};

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);
    Vtb_transform_pipeline* dut = new Vtb_transform_pipeline;

    Verilated::traceEverOn(true);
    VerilatedVcdC* m_trace = new VerilatedVcdC;
    dut->trace(m_trace, 5);
    m_trace->open("waveform.vcd");

    // Generate matrix and vector data using GLM
    glm::mat4 model = glm::mat4(1.0f);
    model = glm::translate(model, glm::vec3(0.0f, 0.0f, -5.0f));
    model = glm::rotate(model, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
    // model = glm::rotate(model, glm::radians(45.0f), glm::vec3(1.0f, 0.0f, 0.0f));
    model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));

    glm::mat4 view = glm::lookAt(
        glm::vec3(0.0f, 0.0f, 3.0f), // Camera position
        glm::vec3(0.0f, 0.0f, 0.0f), // Look at point
        glm::vec3(0.0f, 1.0f, 0.0f)  // Up vector
    );

    float fov = glm::radians(45.0f);
    float aspectRatio = (float)SCREEN_WIDTH / SCREEN_HEIGHT;
    float farPlane = 100.0f;
    glm::mat4 projection = glm::perspective(fov, aspectRatio, ZNEAR, ZFAR);

    // Finished mvp matrix
    glm::mat4 mvp = projection * view * model;

    printf("Expecting:\n");
    for (int i = 0; i < cube_verticies_size; i++) {
        glm::vec4 vertex_projected = mvp * glm::vec4(cube_verticies[i], 1.0f);
        // printf("Vertex projected: %f, %f, %f, %f\n", vertex_projected.x, vertex_projected.y, vertex_projected.z, vertex_projected.w);

        glm::vec4 vertex_ndc = vertex_projected / vertex_projected.w;
        printf("Vertex NDC: %f, %f, %f\n", vertex_ndc.x, vertex_ndc.y, vertex_ndc.z);

        int vertex_pixel[2];
        vertex_pixel[0] = (vertex_ndc.x + 1.0f) * SCREEN_WIDTH / 2.0f;
        vertex_pixel[1] = (1 - vertex_ndc.y) * SCREEN_HEIGHT / 2.0f;

        float vertex_depth = vertex_ndc.z;
        printf("(%d, %d),\n", vertex_pixel[0], vertex_pixel[1]);
    }

    printf("Staring simulation...\n");
    printf("Got: \n");

    // Reset
    for (int i = 0; i < RESET_CLKS; i++) {
        dut->clk ^= 1;
        dut->eval();

        dut->rstn = 0;
        dut->i_mvp_dv = 0;
        dut->i_vertex_dv = 0;

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                dut->i_mvp_matrix[i][j] = 0; 
            }
        }
        for (int i = 0; i < 3; i++) {
            dut->i_vertex[i] = 0;
        }

        dut->i_vertex_last = 0;

        m_trace->dump(sim_time);
        sim_time++;
    }
    dut->rstn = 1;

    // Run simulation while (sim_time < MAX_SIM_TIME) {
    long long vertex_index = 0;
    while (sim_time < MAX_SIM_TIME) {
        dut->clk ^= 1;
        dut->eval();

        if (dut->clk == 1) {
            posedge_cnt++;
            dut->i_vertex_dv = 0;
            dut->i_mvp_dv = 0;
            dut->i_vertex_last = 0;

            // Assign mvp matrix
            if (posedge_cnt == 2) {
                assign_mvp_data(dut, mvp);
                dut->i_mvp_dv = 1;
            }

            if (posedge_cnt >= 4) {
                if (dut->ready && vertex_index < cube_verticies_size) {
                    static int num_sent = 0;
                    num_sent++;
                    printf("Number of sendt vertexes: %d\n", num_sent);

                    if (vertex_index == cube_verticies_size - 1) {
                        dut->i_vertex_last = 1;
                        printf("Sending last\n");
                    }
                    assign_vertex_data(dut, cube_verticies[vertex_index++]);                    
                    dut->i_vertex_dv = 1;
                }
            }

            if (vertex_index == 12) {
                break;
            }

            if (dut->o_vs_vertex_dv) {
                static int num = 0;
                num++;

                float vs_o[4];
                vs_o[0] = FixedPoint<int32_t>(dut->o_vs_vertex[0], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).toFloat();
                vs_o[1] = FixedPoint<int32_t>(dut->o_vs_vertex[1], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).toFloat();
                vs_o[2] = FixedPoint<int32_t>(dut->o_vs_vertex[2], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).toFloat();
                vs_o[3] = FixedPoint<int32_t>(dut->o_vs_vertex[3], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).toFloat();

                printf("VS %d: (%f, %f, %f, %f)\n", num, vs_o[0], vs_o[1], vs_o[2], vs_o[3]);
            }

            static long long num = 0;
            if (num == cube_verticies_size - 1) {
                static int a = 0;
                a++;
                
                if (a == 64) {
                    break;
                }
            }

            if (dut->o_vertex_dv) {
                int32_t vertex_pixel[2];
                float vertex_depth;

                vertex_pixel[0] = sign_extend(dut->o_vertex_pixel[0], OUTPUT_VERTEX_DATAWIDTH);
                vertex_pixel[1] = sign_extend(dut->o_vertex_pixel[1], OUTPUT_VERTEX_DATAWIDTH);
                vertex_depth = FixedPoint<int32_t>(dut->o_vertex_z, OUTPUT_DEPTH_FRACBITS, OUTPUT_DEPTH_FRACBITS+1).toFloat();

                printf("%lld: (%d, %d),\n", ++num, vertex_pixel[0], vertex_pixel[1]);

            }
            if (dut->finished) {
                break;
            }
        }

        m_trace->dump(sim_time);
        sim_time++;
    }
    
    m_trace->close();
    delete dut;
    exit(EXIT_SUCCESS);
}

void print_matrix_glm(glm::mat4 m) {
    float* mat = glm::value_ptr(m);
    printf("%f, %f, %f, %f\n%f, %f, %f, %f\n%f, %f, %f, %f\n%f, %f, %f, %f\n", 
        mat[0], mat[1], mat[2], mat[3],
        mat[4], mat[5], mat[6], mat[7],
        mat[8], mat[9], mat[10], mat[11],
        mat[12], mat[13], mat[14], mat[15]
    );
}

void print_matrix(float mat[4][4]) {
    printf("%f, %f, %f, %f\n%f, %f, %f, %f\n%f, %f, %f, %f\n%f, %f, %f, %f\n", 
        mat[0][0], mat[0][1], mat[0][2], mat[0][3],
        mat[1][0], mat[1][1], mat[1][2], mat[1][3],
        mat[2][0], mat[2][1], mat[2][2], mat[2][3],
        mat[3][0], mat[3][1], mat[3][2], mat[3][3]
    );
}

void print_vector(float vec[4]) {
    printf("%f, %f, %f, %f\n", vec[0], vec[1], vec[2], vec[3]);
}

void print_matrix_fixed_point(void* mat_ptr) {
    int32_t (*mat)[4][4] = (int32_t (*)[4][4])mat_ptr;

    // Convert to float
    float fmat[4][4];
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            float f = FixedPoint<int32_t>((*mat)[i][j], INPUT_VERTEX_FRACBITS, INPUT_VERTEX_DATAWIDTH).toFloat();
            fmat[i][j] = f;
        }
    }

    print_matrix(fmat);
}
